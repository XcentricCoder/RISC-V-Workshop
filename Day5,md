# Lab: The complete pipelined CPU


  This tis he link to my work of [CPU](https://myth.makerchip.com/sandbox/0BBfVh7k7/0JZh8pg#)

  1. Go to Makerchip and click on launch makerchip IDE
  2. Go to editor and place the below TL-Verilog in place of //...


   

                                       
   |cpu
      @0
         $reset = *reset;
         //$start = !$reset && >>1$reset;
             //PC Logic
         $pc[31:0] = (>>1$reset) ? 32'd0 :
                     (>>3$valid_taken_br) || (>>3$valid_jump) && (>>3$is_jal) ? (>>3$br_tgt_pc):
                     (>>3$is_jalr) && (>>3$valid_jump) ? (>>3$jalr_tgt_pc):
                     (>>3$valid_load) ? (>>3$inc_pc):
                     >>1$inc_pc ;
            
            
         $imem_rd_en = ! $reset ;
         $imem_rd_addr[M4_IMEM_INDEX_CNT - 1:0] = $pc[M4_IMEM_INDEX_CNT + 1:2];
      
         
      @1
         *passed = |cpu/xreg[10]>>5$value == (1+2+3+4+5+6+7+8+9);
         //Instruction fetch from memory
         $instr[31:0] = $imem_rd_data[31:0];
         $inc_pc[31:0] =  $pc + 4 ;
         //instruction type decoding
         $is_i_instr = $instr[6:2]==? 5'b0000x || $instr[6:2]==? 5'b001x0 || $instr[6:2]==? 5'b11001 || $instr[6:2]==? 5'b00100 ;
         $is_r_instr = $instr[6:2]==? 5'b011x0 || $instr[6:2]==? 5'b01011 || $instr[6:2]==? 5'b10100;
         $is_b_instr = $instr[6:2]==? 5'b11000 ;
         $is_u_instr = $instr[6:2]==? 5'b0x101 ;
         $is_j_instr = $instr[6:2]==? 5'b11011 ;
         $is_s_instr = $instr[6:2]==? 5'b0100x ;


         $imm[31:0] = $is_i_instr ? {{21{$instr[31]}}, $instr[30:20]}:
                      $is_s_instr ? {{21{$instr[31]}}, $instr[30:25], $instr[11:8],$instr[7]}:
                      $is_b_instr ? {{20{$instr[31]}}, $instr[7], $instr[30:25], $instr[11:8],1'd0}:
                      $is_u_instr ? { $instr[31] ,  $instr[30:20] ,$instr[19:12] , 12'd0 }:
                      $is_j_instr ? {{12{$instr[31]}} , $instr[19:12] , $instr[20] , $instr[30:25], $instr[24:21], 1'd0}:
                      32'b0;

         $rs2_valid = $is_r_instr || $is_s_instr || $is_b_instr;
         ?$rs2_valid
            $rs2[4:0] = $instr[4:0];
         $rs1_valid = $is_r_instr || $is_s_instr || $is_b_instr || $is_i_instr;
         ?$rs1_valid
            $rs1[4:0] = $instr[19:15];
         $rd_valid =  $is_r_instr || $is_u_instr || $is_j_instr || $is_i_instr;
         ?$rd_valid
            $rd[4:0] = $instr[11:7];
         $funct3_valid = $is_r_instr || $is_s_instr || $is_b_instr || $is_i_instr;
         ?$funct3_valid
            $funct3[2:0] = $instr[14:12];
         $funct7_valid = $is_r_instr;
         ?$funct7_valid
            $funct7[6:0] = $instr[31:25];
         $opcode[6:0] = $instr[6:0];
            ////////////////////////////////////////////////////////////
         $dec_bits[10:0] = {$funct7[5] ,$funct3, $opcode};
         $is_beq = $dec_bits ==? 11'bx0001100011;
         $is_bne = $dec_bits ==? 11'bx0011100011;
         $is_blt = $dec_bits ==? 11'bx1001100011;
         $is_bge = $dec_bits ==? 11'bx1011100011;
         $is_bltu = $dec_bits ==? 11'bx1101100011;
         $is_bgeu = $dec_bits ==? 11'bx1111100011;
         $is_addi = $dec_bits ==? 11'bx0000010011;
         $is_add = $dec_bits ==? 11'b00000110011;
         $is_load = $dec_bits ==? 11'bxxxx0000011;
         $is_lui = $dec_bits ==? 11'bxxxx0110111;
         $is_auipc = $dec_bits ==? 11'bxxxx0010111;
         $is_lb = $dec_bits ==? 11'bx0000000011;
         $is_lh = $dec_bits ==? 11'bx0010000011;
         $is_lw = $dec_bits ==? 11'bx0100000011;
         $is_lbu = $dec_bits ==? 11'bx1000000011;
         $is_jal = $dec_bits ==? 11'bxxxx1101111;
         $is_jalr = $dec_bits ==? 11'bx0001100111;
         $is_lhu = $dec_bits ==? 11'bx1010000011;
         $is_sb = $dec_bits ==? 11'bx0000100011;
         $is_sh =  $dec_bits ==? 11'bx0010100011;
         $is_sw = $dec_bits ==? 11'bx0100100011;
         $is_slti = $dec_bits ==? 11'bx0100010011;
         $is_sltiu = $dec_bits ==? 11'bx0110010011;
         $is_xori = $dec_bits ==? 11'bx1000010011;
         $is_ori = $dec_bits ==? 11'bx1100010011;
         $is_andi = $dec_bits ==? 11'bx1110010011;
         $is_slli = $dec_bits ==? 11'b00010010011;
         $is_srli = $dec_bits ==? 11'b01010010011;
         $is_srai = $dec_bits ==? 11'b11010010011;
         $is_sub = $dec_bits ==? 11'b10000110011;
         $is_sll = $dec_bits ==? 11'b00010110011;
         $is_slt = $dec_bits ==? 11'b00100110011;
         $is_sltu = $dec_bits ==? 11'b00110110011;
         $is_xor = $dec_bits ==? 11'b01000110011;
         $is_srl = $dec_bits ==? 11'b01010110011;
         $is_sra = $dec_bits ==? 11'b11010110011;
         $is_or = $dec_bits ==? 11'b01100110011;
         $is_and = $dec_bits ==? 11'b01110110011;
         

            //Assigning the output values of register files
      @2  
            
         $src1_value[31:0] = (>>1$rf_wr_index == $rf_rd_index1) && >>1$rf_wr_en ?
                                 >>1$rf_wr_data : $rf_rd_data1;
            
         $src2_value[31:0] = (>>1$rf_wr_index == $rf_rd_index2) && >>1$rf_wr_en ?
                                 >>1$rf_wr_data : $rf_rd_data2;
                                 
         $br_tgt_pc = $pc + $imm ;
         ///read into the register files
         $rf_rd_en1 = $rs1_valid;
         $rf_rd_en2 = $rs2_valid;
         $rf_rd_index1[4:0] = $rs1[4:0];
         $rf_rd_index2[4:0] = $rs2[4:0];

            
      @3
         $result[31:0] = $is_addi || $is_s_instr || $is_load ? $src1_value +$imm :
                            $is_add ? $src1_value + $src2_value :
                            $is_andi ? $src1_value & $imm :
                            $is_xori ? $src1_value ^ $imm :
                            $is_ori ? $src1_value | $imm :
                            $is_slli ? $src1_value << $imm[5:0] :
                            $is_srli ? $src1_value >> $imm[5:0] :
                            $is_and ? $src1_value & $src2_value :
                            $is_or ? $src1_value | $src2_value :
                            $is_xor ? $src1_value ^ $src2_value :
                            $is_sub ? $src1_value - $src2_value :
                            $is_sll ? $src1_value << $src2_value[4:0] :
                            $is_srl ? $src1_value >> $src2_value[4:0] :
                            $is_sltu ? $src1_value < $src2_value:
                            $is_sltiu ? $src1_value < $imm:
                            $is_lui ? {$imm[31:12], 12'b0}:
                            $is_auipc ? $pc + $imm :
                            $is_jal ? $pc + 4 :
                            $is_jalr ? $pc + 4 :
                            $is_srai ? { {32{$src1_value[31]}}, $src1_value} >> $imm[4:0]:
                            $is_sra ? { {32{$src1_value[31]}}, $src1_value} >>  $src2_value[4:0] :
                            $is_slt ? ($src1_value[31] == $src2_value[31]) ? $sltu_rslt :{31'b0,$src1_value[31]}:
                            $is_slti ? ($src1_value[31] == $imm[31]) ? $sltiu_rslt :{31'b0,$src1_value[31]}:
                           32'dx;


         $taken_br =   (! $is_b_instr) ? 1'b0:
                           $is_beq ? ($src1_value == $src2_value):
                           $is_bne? ($src1_value != $src2_value):
                           $is_blt? ($src1_value  < $src2_value)^($src1_value[31] != $src2_value[31]):
                           $is_bge? ($src1_value  >= $src2_value)^($src1_value[31] != $src2_value[31]):
                           $is_bltu? ($src1_value  < $src2_value):
                           $is_bgeu? ($src1_value  >= $src2_value):
                           1'b0;
            ///write into the register files
         $rf_wr_en = $rd_valid && $valid && $rd!='0;
         $rf_wr_index[4:0] = >>2$valid_load ? >>2$rd : $rd[4:0];
         $rf_wr_data[31:0] = >>2$valid_load ? >>2$ld_data: $result ;
         
         $is_jump = $is_jal || $is_jalr ;
         
         $valid_taken_br = $valid && $taken_br;
         $valid_load = $valid && $is_load ;
         $valid_jump = $valid && $is_jump ;
         $valid  = !(>>1$valid_taken_br || >>2$valid_taken_br
                     || >>1$valid_load || >>2$valid_load
                     || >>1$valid_jump || >>2$valid_jump);
         
         $sltu_rslt = $src1_value < $src2_value;
         $sltiu_rslt = $src1_value < $imm;
         
         $jalr_tgt_pc = $src1_value + $imm ;

      @4
         $dmem_wr_en = $is_s_instr && $valid;
         
         $dmem_addr[3:0] = $result[5:2];
         
         $dmem_wr_data[31:0] = $src2_value;
         
         $dmem_rd_en = $is_load;     
         
         

      @5 
         $ld_data[31:0] = $dmem_rd_data;















                                                                                     
